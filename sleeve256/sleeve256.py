#!/usr/bin/env python3

# Calculates floor(2**256/pi), and encodes the result as base64.
# Intended to be used as a SHA256 hash where I don't have a preimage up my sleeve.
# Originally by Ryan Castellucci.  Python3 port, pi sourcing, and base64 output added by Jeremy Rand.

import codecs, gmpy2

# precision in bits
gmpy2.get_context().precision=1024

# 1000 digits of pi from https://www.angio.net/pi/digits/1000.txt (first HTTPS result in Startpage results for "digits of pi")
# (retrieved 2017 May 13.)
pi_str = '3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806613001927876611195909216420198'
pi_mpfr = gmpy2.mpfr(pi_str)
fraction = gmpy2.floor(2**256/pi_mpfr)

hx = hex(int(fraction))[2:66]
#print(hx)

b64 = codecs.encode(codecs.decode(hx, "hex"), "base64").decode()
print(b64)
